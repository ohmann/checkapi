"""
<Program Name>
  udp_branching_lib.repy

<Author>
  Steven Portzer

<Date Started>
  December 2, 2011

<Purpose>
  Allows UDP traffic to be routed through any of several shim stacks so
  that UDP decider shims can be written.

"""

dy_import_module_symbols('udpbranchinghelpershim')
dy_import_module_symbols('shim_exceptions')
dy_import_module_symbols('random')




class BaseUdpDeciderShim(BaseShim):

  # =================================================================
  # Fields and methods that subclasses must override.
  # =================================================================

  # The name of this shim class.
  _SHIM_NAME = None

  # A list of shim strings used by this decider. If you want to change
  # this based on the optional arguments, then the subclass should set
  # self._shim_string_list in __init__ before calling
  # BaseUdpDeciderShim.__init__(self, shim_stack, optional_args).
  _shim_string_list = None


  def copy(self):
    raise ShimError("The copy() method is not implemented.")


  def get_advertisement_string(self):
    raise ShimError("The get_advertisement_string() method is not implemented.")


  def _get_next_stack_id(self, statistics_list, has_remote_stats, time_elapsed, state_context):
    """
    <Purpose>
      Compute the shim stack number to be used when sending messages.

    <Arguments>
      statistics_list - A list of dictionaries containing statistics for
          messages sent from some local IP to some remote IP and port.
          Each entry in the list corresponds to statistics for the shim
          stack in the same position in _shim_string_list.

      has_remote_stats - If True, the dictionaries in statistics_list
          are of the form {'messages_sent': int, 'bytes_sent': int,
          'messages_received': int, 'bytes_received': int}, if False
          then just contain the 'messages_sent' and 'bytes_sent' fields
          and not any information on the messages received by the remote
          server. If this is False, then it's very possible the server
          isn't actually listening on that port.

      time_elapsed - The time period over which the messages in
          statistics_list were send/received. Useful for calculating
          throughput.

      state_context - A dictionary specific to the local IP and remote
          IP and port for which we were given statistics. If the
          subclass wants to store any data, this is the place to do it.
          It is intialized with 'localip', 'remoteip', and 'remoteport'
          fields.

    <Side Effects>
      None

    <Exceptions>
      None

    <Return>
      An integer giving a position in _shim_string_list. The shim stack
      indicated will be used for future messages sent to the local IP
      and remote IP and port for which we were given statistics.
    """

    raise ShimError("The _get_next_stack_id method is not implemented.")



  # =================================================================
  # Fields and methods that subclasses can override.
  # =================================================================

  # Time between successive requests to a server to get statistics.
  _CHECK_STATISTICS_INTERVAL = 5

  # Timeout when contacting a server for statistics information.
  _CHECK_STATISTICS_TIMEOUT = 1


  # If you override __init__, you must call
  # BaseUdpDeciderShim.__init__(self, shim_stack, optional_args).
  def __init__(self, shim_stack, optional_args=None):
    BaseShim.__init__(self, shim_stack, optional_args)

    if not self._SHIM_NAME:
      raise ShimError("UDP decider shim must define '_SHIM_NAME'")

    self._context_lock.acquire(True)

    # Initialize shared shim state if necessary.
    if self._SHIM_NAME not in self._shim_contexts:
      shim_context = {}

      # Maps (localip, remoteip, remoteport) tuples to last result of
      # looking up statistics for that tuple.
      shim_context['statistics_cache'] = {}

      # Maps (localip, remoteip, remoteport) tuples to the last time we
      # looked up statistics for that tuple.
      shim_context['last_lookup_time_dict'] = {}

      # Maps (localip, remoteip, remoteport) tuples to the number of the
      # shim stack to use for sending from that localip the remote IP
      # and port.
      shim_context['stack_id_dict'] = {}

      # Maps (localip, remoteip, remoteport) tuples to dictionaries the
      # subclass can use for storing state information.
      shim_context['state_context_dict'] = {}

      shim_context['statistics_lock'] = createlock()

      self._shim_contexts[self._SHIM_NAME] = shim_context

    self._context_lock.release()

    if not self._shim_string_list:
      raise ShimError("UDP decider shim must define '_shim_string_list'")

    self._branching_interface = UdpBranchingInterface(shim_stack, self._shim_string_list)



  # =================================================================
  # Fields and methods that subclasses shouldn't override.
  # =================================================================

  # Maps from _SHIM_NAME to a context for storing shared shim state.
  _shim_contexts = {}
  _context_lock = createlock()


  def _get_current_stack_id(self, localip, remoteip, remoteport):
    send_id = (localip, remoteip, remoteport)
    shim_context = self._shim_contexts[self._SHIM_NAME]

    shim_context['statistics_lock'].acquire(True)

    # If this is the first time we've used this (localip, remoteip, remoteport)
    # tuple, intialize statistics information to default values.
    if send_id not in shim_context['statistics_cache']:
      shim_context['statistics_cache'][send_id] = []
      for i in range(len(self._shim_string_list)):
        shim_context['statistics_cache'][send_id].append({'messages_sent': 0,
                                                          'bytes_sent': 0,
                                                          'messages_received': 0,
                                                          'bytes_received': 0})

      shim_context['last_lookup_time_dict'][send_id] = getruntime()

      # Default to initially using the first shim stack.
      shim_context['stack_id_dict'][send_id] = 0

      shim_context['state_context_dict'][send_id] = {'localip': localip,
                                                     'remoteip': remoteip,
                                                     'remoteport': remoteport}

    # If we are due for another statistics lookup, then run it in a new
    # thread so we don't slow down the current sendmessage call.
    current_time = getruntime()
    time_elapsed = current_time - shim_context['last_lookup_time_dict'][send_id]
    if time_elapsed > self._CHECK_STATISTICS_INTERVAL:
      shim_context['last_lookup_time_dict'][send_id] = current_time
      createthread(self._update_statistics_thread(localip, remoteip, remoteport, time_elapsed))

    stack_id = shim_context['stack_id_dict'][send_id]

    shim_context['statistics_lock'].release()

    return stack_id


  def _update_statistics_thread(self, localip, remoteip, remoteport, time_elapsed):

    def _update_statistics_func():
      try:
        statistics_list = self._branching_interface.get_all_statistics(localip, remoteip, remoteport,
                                                                       self._CHECK_STATISTICS_TIMEOUT)

      # Request timed out, but we can update the stack ID based on
      # locally collected data.
      except TimeoutError:
        statistics_list = self._branching_interface.get_local_statistics(localip, remoteip, remoteport)

      # If we get a RepyArgumentError then one of the arguments is not a
      # valid IP or port, so there's no point in updating the stack ID.
      except RepyArgumentError:
        return

      send_id = (localip, remoteip, remoteport)
      shim_context = self._shim_contexts[self._SHIM_NAME]
      diff_statistics_list = []
      has_remote_stats = True

      shim_context['statistics_lock'].acquire(True)

      # Compute the difference from the last lookup.
      for index in range(len(statistics_list)):
        new_stat_dict = statistics_list[index]
        old_stat_dict = shim_context['statistics_cache'][send_id][index]
        diff_stat_dict = {}
        diff_statistics_list.append(diff_stat_dict)

        for key in ['messages_sent', 'bytes_sent',
                    'messages_received', 'bytes_received']:
          if key not in new_stat_dict or key not in old_stat_dict:
            has_remote_stats = False
          else:
            diff_stat_dict[key] = new_stat_dict[key] - old_stat_dict[key]

      shim_context['statistics_cache'][send_id] = statistics_list

      # Make a copy of the state information to minimize the risk of
      # concurrent access.
      state_context = shim_context['state_context_dict'][send_id].copy()

      shim_context['statistics_lock'].release()

      # Compute the next shim stack to be used by sendmessage calls.
      stack_id = self._get_next_stack_id(diff_statistics_list, has_remote_stats,
                                        time_elapsed, state_context)

      if stack_id is not None:
        shim_context['statistics_lock'].acquire(True)
        shim_context['state_context_dict'][send_id] = state_context
        shim_context['stack_id_dict'][send_id] = stack_id
        shim_context['statistics_lock'].release()

    return _update_statistics_func


  def sendmessage(self, destip, destport, message, localip, localport):
    stack_id = self._get_current_stack_id(localip, destip, destport)
    return self._branching_interface.sendmessage(destip, destport, message, localip, localport, stack_id)


  def listenformessage(self, localip, localport):
    return self._branching_interface.listenformessage(localip, localport)


  def udpserversocket_getmessage(self, udpserversocket):
    return udpserversocket.getmessage()


  def udpserversocket_close(self, udpserversocket):
    return udpserversocket.close()




class UdpBranchingServerSocket:

  # Time to sleep when trying to get to get statistics requests.
  _SLEEP_TIME = 0.05


  def __init__(self, server_socket_list, localip, localport,
               statistics_server_socket, client_shim_stack):
    """
    Initializes the server socket.

    Arguments:
      server_socket_list - A list of server sockets used to receive
          messages. If any one socket gets a message, the message will
          be returned by getmessage()

      localip - The local IP this server socket is listening on.

      localport - The local port this server socket is listening on.

      statistics_server_socket - Server socket for listening for
          statistics requests

      client_shim_stack - Shim stack for sending statistics responses
          back to clients
    """

    self._server_socket_list = server_socket_list

    self._localip = localip
    self._localport = localport

    self._statistics_server_socket = statistics_server_socket
    self._client_shim_stack = client_shim_stack

    # Keep track of if this socket has been closed.
    self._closed = False
    self._closed_lock = createlock()

    # Begin listening for statistics requests.
    createthread(self._statistics_request_loop)


  def _statistics_request_loop(self):
    """
    Listens for message statistics requests from clients and replies
    with statistics on the messages this server has received.
    """

    send_shim_obj = self._client_shim_stack.peek()
    server_socket = self._statistics_server_socket

    while True:
      sleep(self._SLEEP_TIME)

      self._closed_lock.acquire(True)

      # Make sure the server socket hasn't been closed.
      if self._closed:
        self._closed_lock.release()
        break

      self._closed_lock.release()

      while True:
        # Check if we have received a statistics request.
        try:
          remoteip, remoteport, _ = server_socket.getmessage()
        except SocketWouldBlockError:
          break

        recv_id = (remoteip, self._localip, self._localport)

        UdpBranchingInterface._received_statistics_lock.acquire(True)

        # Create a new entry for the given combination of IPs and ports
        # if it's not already in the received statistics dictionary.
        if recv_id not in UdpBranchingInterface._received_statistics_dict:
          UdpBranchingInterface._received_statistics_dict[recv_id] = []
          for i in self._server_socket_list:
            UdpBranchingInterface._received_statistics_dict[recv_id].append({'messages': 0, 'bytes': 0})

        statistics_list = UdpBranchingInterface._received_statistics_dict[recv_id]

        # Generate a list of the statistics for all the different shim stacks.
        message_list = []
        for stat_dict in statistics_list:
          message_list.append(str(stat_dict['messages']) + "," + str(stat_dict['bytes']))

        UdpBranchingInterface._received_statistics_lock.release()

        statistics_message = ":".join(message_list)

        # Send the statistics back to the client.
        send_shim_obj.sendmessage(remoteip, remoteport, statistics_message, self._localip, self._localport)

    # Stop listening if the socket is closed.
    server_socket.close()


  def getmessage(self):
    """
    Returns a (remote_ip, remote_port, message) tuple if there are any
    available messages to return.
    """

    self._closed_lock.acquire(True)

    # Make sure the server socket hasn't been closed.
    if self._closed:
      self._closed_lock.release()
      raise SocketClosedLocal("The socket has been closed!")

    self._closed_lock.release()

    for index in range(len(self._server_socket_list)):
      server_socket = self._server_socket_list[index]

      try:
        remoteip, remoteport, message = server_socket.getmessage()

      # If the socket would block, try the next one.
      except SocketWouldBlockError:
        continue

      recv_id = (remoteip, self._localip, self._localport)
      UdpBranchingInterface._received_statistics_lock.acquire(True)

      # Create a new entry for the given combination of IPs and ports if
      # it's not already in the received statistics dictionary.
      if recv_id not in UdpBranchingInterface._received_statistics_dict:
        UdpBranchingInterface._received_statistics_dict[recv_id] = []
        for i in self._server_socket_list:
          UdpBranchingInterface._received_statistics_dict[recv_id].append({'messages': 0, 'bytes': 0})

      # Update statistics on received messages.
      UdpBranchingInterface._received_statistics_dict[recv_id][index]['messages'] += 1
      UdpBranchingInterface._received_statistics_dict[recv_id][index]['bytes'] += len(message)

      UdpBranchingInterface._received_statistics_lock.release()

      return (remoteip, remoteport, message)

    raise SocketWouldBlockError("No messages currently available!")


  def close(self):
    """
    Closes the server socket.
    """

    self._closed_lock.acquire(True)

    # Check if the server socket has already been closed.
    if self._closed:
      self._closed_lock.release()
      return False

    else:
      self._closed = True
      self._closed_lock.release()

      for server_socket in self._server_socket_list:
        server_socket.close()

      return True




class UdpBranchingInterface:

  # Maps (localip, localport) tuples to (UdpServerSocket, set) tuples,
  # where the set contains the ID strings of all the multiplexers using
  # the server socket.
  _server_socket_dict = {}
  _server_socket_lock = createlock()

  # Maps ((localip, localport), id_string) tuples to
  # (remote_ip, remote_port, message) tuples that haven't yet been
  # returned by a server socket's getmessage method.
  _unreturned_tuple_dict = {}
  _unreturned_tuple_lock = createlock()

  # Maps (localip, remoteip, remoteport) to lists of {'messages': int,
  # 'bytes': int} dictionaries that stores statistics on the number of
  # messages and the number of bytes sent to the remote IP/port from
  # the local IP. The position in the list corresponds to the position
  # in the shim strings list of the shim stack used to send the messages.
  _sent_statistics_dict = {}
  _sent_statistics_lock = createlock()

  # Maps (remoteip, localip, localport) to lists of {'messages': int,
  # 'bytes': int} dictionaries that stores statistics on the number of
  # messages and the number of bytes received by the local IP/port from
  # the remote IP. The position in the list corresponds to the position
  # in the shim strings list of the shim stack used to get the messages.
  _received_statistics_dict = {}
  _received_statistics_lock = createlock()


  def __init__(self, shim_stack, shim_string_list):
    """
    <Purpose>
      Initialize the UdpBranchingInterface.

    <Arguments>
      shim_stack - The shim stack that this branching interface uses to
          send and get messages. Essentially, the shim stack below all
          the shim stacks constructed by the interface.

      shim_string_list - A list of strings used to construct the list of
          shim stacks used by the the interface. Tthe shim's position in
          the list is the stack id passed in when sending messages.

    <Side Effects>
      None

    <Exceptions>
      None

    <Return>
      None
    """

    self._shim_stack = shim_stack
    self._shim_string_list = shim_string_list

    # The list of shim stacks used to send and listen for messages.
    self._shim_stack_list = []
    next_shim_string = self._shim_stack.shim_stack_context['shim_str']

    for index in range(len(self._shim_string_list)):
      current_shim_string = self._shim_string_list[index]
      current_shim_stack = ShimStack(current_shim_string +
                                     "(UdpBranchingHelperShim," + str(index) + ")" +
                                     next_shim_string)
      self._shim_stack_list.append(current_shim_stack)

    self._server_shim_stack = ShimStack("(UdpBranchingHelperShim,S)" + next_shim_string)
    self._client_shim_stack = ShimStack("(UdpBranchingHelperShim,C)" + next_shim_string)


  def sendmessage(self, destip, destport, message, localip, localport, stack_id):
    """
    Sends a UDP message through the designated shim stack. The stack ID
    is the position of the corresponding shim string in the list of shim
    strings used to initialize this branching interface.
    """

    shim_object = self._shim_stack_list[stack_id].peek()
    bytes_sent = shim_object.sendmessage(destip, destport, message, localip, localport)

    send_id = (localip, destip, destport)
    self._sent_statistics_lock.acquire(True)

    # Create a new entry for the given combination of IPs and ports if
    # it's not already in the sent statistics dictionary.
    if send_id not in self._sent_statistics_dict:
      self._sent_statistics_dict[send_id] = []
      for i in self._shim_stack_list:
        self._sent_statistics_dict[send_id].append({'messages': 0, 'bytes': 0})

    # Update statistics on sent messages.
    self._sent_statistics_dict[send_id][stack_id]['messages'] += 1
    self._sent_statistics_dict[send_id][stack_id]['bytes'] += bytes_sent

    self._sent_statistics_lock.release()

    return bytes_sent


  def listenformessage(self, localip, localport):
    """
    Starts listening on the given IP and port. The returned socket will
    have sockets listening on all the shim stacks used by this interface,
    and if any one of the shim stacks receives a message it will be
    returned by getmessage()
    """

    server_socket_list = []

    try:
      # Begin listening on all of our shim stacks
      for shim_stack in self._shim_stack_list:
        server_socket = shim_stack.peek().listenformessage(localip, localport)
        server_socket_list.append(server_socket)

      statistics_shim_obj = self._server_shim_stack.peek()
      statistics_server_socket = statistics_shim_obj.listenformessage(localip, localport)

    # If any of the calls to listenformessage fail, clean up all the
    # sockets we have already created and raise the same exception.
    except Exception, err:
      for server_socket in server_socket_list:
        server_socket.close()
      raise err

    return UdpBranchingServerSocket(server_socket_list, localip, localport,
                                    statistics_server_socket, self._client_shim_stack)


  def get_local_statistics(self, localip, remoteip, remoteport):
    """
    Returns a list of {'messages_sent': int, 'bytes_sent': int}
    dictionaries for messages sent from the given localip to the given
    remote ip and port. Each entry in the list corresponds to the shim
    stack constructed from the string in the same position in the shim
    stack string list used to construct this interface.
    """

    send_id = (localip, remoteip, remoteport)
    self._sent_statistics_lock.acquire(True)

    copy = []

    # Create an list with values set to zero if we haven't sent anything.
    if send_id not in self._sent_statistics_dict:
      for i in self._shim_stack_list:
        new_stat_dict = {'messages_sent': 0, 'bytes_sent': 0}
        copy.append(new_stat_dict)

    else:
      # Make a copy of the sent statistics entry.
      for stat_dict in self._sent_statistics_dict[send_id]:
        new_stat_dict = {'messages_sent': stat_dict['messages'],
                         'bytes_sent': stat_dict['bytes']}
        copy.append(new_stat_dict)

    self._sent_statistics_lock.release()

    return copy


  def get_all_statistics(self, localip, remoteip, remoteport, timeout):
    """
    Returns a list of {'messages_sent': int, 'bytes_sent': int,
    'messages_received': int, 'bytes_received': int} dictionaries
    for messages sent from the given localip to the given remote ip and
    port. Each entry in the list corresponds to the shim stack
    constructed from the string in the same position in the shim stack
    string list used to construct this interface.

    If it takes longer than timeout seconds to receive a reply from the
    server we are contacting then TimeoutError is raised.

    RepyArgumentError is possible if the given arguments are invalid.
    """

    statistics_dict = self.get_local_statistics(localip, remoteip, remoteport)
    start_time = getruntime()

    while getruntime() - start_time < timeout:
      localport = self._retrieve_random_udp_port()

      if not localport:
        sleep(0.01)
        continue

      send_shim_obj = self._server_shim_stack.peek()
      recv_shim_obj = self._client_shim_stack.peek()

      # Create a server socket for listening for the server's response.
      try:
        server_socket = recv_shim_obj.listenformessage(localip, localport)
      except (DuplicateTupleError, AlreadyListeningError,
              AddressBindingError, ResourceForbiddenError):
        sleep(0.01)
        continue

      # The server doesn't actually look at the message contents before
      # sending a respose, so it doesn't matter what we send.
      try:
        send_shim_obj.sendmessage(remoteip, remoteport, '', localip, localport)
      except (DuplicateTupleError, AlreadyListeningError,
              AddressBindingError, ResourceForbiddenError):
        server_socket.close()
        sleep(0.01)
        continue

      while getruntime() - start_time < timeout:
        # Keep trying to receive until we get a response back.
        try:
          messageip, messageport, message = server_socket.getmessage()
        except SocketWouldBlockError:
          sleep(0.01)
          continue

        # Make sure the message actual came from the right location.
        if remoteip != messageip or remoteport != messageport:
          continue
        else:
          break

      server_socket.close()

      try:
        stat_message_list = message.split(":")
        for index in range(len(statistics_dict)):
          messages_recv, bytes_recv = stat_message_list[index].split(",",1)
          statistics_dict[index]["messages_received"] = int(messages_recv)
          statistics_dict[index]["bytes_received"] = int(bytes_recv)

      except Exception:
        sleep(0.01)
        continue

      return statistics_dict

    raise TimeoutError("Statistics lookup timed out!")


  def _retrieve_random_udp_port(self):
    # We look up the allowed UDP ports and which ports are already being used.
    # Then we pick an available port.
    (resource_list_limit, resource_list_usage, stoptimes) = getresources()
    available_ports = list(resource_list_limit['messport'] - resource_list_usage['messport'])

    if not available_ports:
      available_ports = resource_list_limit['messport']

    if not available_ports:
      return None

    # Choose a random port out of the available ports.
    rand_index = int(randomfloat() * (len(available_ports)-1))
    localport = available_ports[rand_index]

    return localport
